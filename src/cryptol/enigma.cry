alphabet   = [ 'A' .. 'Z' ]
                // ABCDEFGHIJKLMNOPQRSTUVWXYZ
rotorIchars     = "EKMFLGDQVZNTOWYHXUSPAIBRCJ"
rotorIIchars    = "AJDKSIRUXBLHWTMCQGZNPYFVOE"
rotorIIIchars   = "BDFHJLCPRTXVZNYEIWGAKMUSQO"
rotorIVchars    = "ESOVPZJAYQUIRHXLNFTGKDCMWB" // from Wikipedia Enigma_rotor_details
rotorVchars     = "VZBRGITYUPSDNHLXAWMJQOFECK"
rotorVIchars    = "JPGVOUMFYQBENHZRDKASXLICTW"
rotorVIIchars   = "NZJHGRCXMYSWBOUFAIVLPEKQDT"
rotorVIIIchars  = "FKQHTLXOCBJSPDZRAMEWNIUYGV"
reflectorAchars = "EJMZALYXVBWFCRQUONTSPIKHGD" // permutation with rotor set to A
reflectorBchars = "YRUHQSLDPXNGOKMIEBFZCWVJAT"
reflectorCchars = "FVPJIAOYEDRZXWGCTKUQSBNMHL"

notchI     = (1 << asciiToIndex 'Q' ):[26]
notchII    = (1 << asciiToIndex 'E' ):[26]
notchIII   = (1 << asciiToIndex 'V' ):[26]

offsetToChar : Offset -> Char
offsetToChar o = 'A' + (0b0 # o)
charToOffset : Char -> Offset
charToOffset c = drop`{1}(c - 'A')

// extract offsets from character permutation
// stringToOffsets : {n} (fin n) => String n -> Offsets n
stringToOffsets : String 26 -> Offsets 26
stringToOffsets reflector = [ drop`{1}((26 + r - c) % 26) | c <- alphabet | r <- reflector ]

reflectorAoff = stringToOffsets reflectorAchars
reflectorBoff = stringToOffsets reflectorBchars
reflectorCoff = stringToOffsets reflectorCchars

rotorIoff, rotorIIoff, rotorIIIoff : Offsets 26
rotorIoff   = stringToOffsets rotorIchars
rotorIIoff  = stringToOffsets rotorIIchars
rotorIIIoff = stringToOffsets rotorIIIchars
rotorVIoff  = stringToOffsets rotorVIchars
rotorVIIIoff  = stringToOffsets rotorVIIIchars

rotorIrev = invertPermutation rotorIchars
rotorIIrev = invertPermutation rotorIIchars
rotorIIIrev = invertPermutation rotorIIIchars
rotorVIrev = invertPermutation rotorVIchars
rotorVIIIrev = invertPermutation rotorVIIIchars

rotorIoffBwd = stringToOffsets rotorIrev
rotorIIoffBwd = stringToOffsets rotorIIrev
rotorIIIoffBwd = stringToOffsets rotorIIIrev
rotorVIoffBwd = stringToOffsets rotorVIrev
rotorVIIIoffBwd = stringToOffsets rotorVIIIrev

sum ls = sums!0 where sums= [0] # [ (p + n) % 26 | p <- ls | n <- sums ]
// sum reflectorBoff == 0
// theorem: sum of any permutation offsets = 0?

type Char          = [8]
type Offset        = [7]
type Rotor         = [26](Offset,Offset,Bit) // fwd, rev, pin
type Pins          = [26]Bit
type OffsetPerm    = [26]Offset
type CharPerm      = [26]Char
type Reflector     = [26]Offset
type ThreeRotors   = [3]Rotor
type Offsets n     = [n]Offset
type Swaps n       = [n][2][8]
type Rings n       = Offsets n
type InitialPosn n = Offsets n

buildPlugboard : {n} (fin n, width n >= 1) => Swaps n -> [26][8] -> [width n] -> CharPerm
buildPlugboard swaps permutation i =
    if i >= width swaps
        then permutation
        else buildPlugboard swaps swappedPerm (i + 1) where
            swappedPerm = doSwap (swaps@i) permutation

// cryptol wibble: without parens above, got weird error

doSwap : [2][8] -> [26][8] -> [26][8]
doSwap [c, d] perm = perm2 where
    indexOfC = indexOf c perm
    indexOfD = indexOf d perm
    perm1 = [ if i == indexOfC then d else x | x <- perm | i <- [0..25]]
    perm2 = [ if i == indexOfD then c else x | x <- perm1 | i <- [0..25]]

pinsI, pinsII, pinsIII, pinsVI, pinsVIII, zeroPins : Pins
zeroPins = 0

setBit : {a, b} (fin a, fin b, b >= 1) => [a] -> [b] -> [b]
setBit b n = n || ((1 >>> 1) >> b)

pinsI    = setBit (indexOf 'Q' alphabet) zeroPins
pinsII   = setBit (indexOf 'E' alphabet) zeroPins
pinsIII  = setBit (indexOf 'V' alphabet) zeroPins
pinsVI   = zero // need to find this
pinsVIII = zero // need to find this

buildRotor : OffsetPerm -> OffsetPerm -> Pins -> Rotor
buildRotor fwd rev bs = [ ( of, ob, b )
                        | of <- fwd
                        | ob <- rev
                        | b <- bs
                        ]

type EnigmaState = {
    rotors    : ThreeRotors,
    reflector : Reflector,
    plugboard : CharPerm
    }

// Basic Enigma state has Rings all at 1, Rotors at "AAA"
buildBasicState : [3]OffsetPerm -> [3]OffsetPerm -> [3]Pins ->
    Reflector -> CharPerm -> EnigmaState
buildBasicState fwdOffs revOffs pins refl plug =
    { rotors = rs, reflector = refl, plugboard = plug } where
    rs = [ buildRotor f b p
         | f <- fwdOffs
         | b <- revOffs
         | p <- pins
         ]

buildEnigmaState : [3]OffsetPerm -> [3]OffsetPerm -> [3]Pins ->
    Reflector -> CharPerm -> Rings 3 -> String 3 -> EnigmaState
buildEnigmaState fo bo pins refl plug rings key =
    { rotors = rs,
      reflector = refl,
      plugboard = plug } where
    rs0 = [ buildRotor (f >>> ring) (b >>> ring) p
          | f <- fo
          | b <- bo
          | ring <- rings
          | p <- pins
          ]
    rs = [ r <<< o | r <- rs0 | o <- keyOffs ]
    keyOffs = [ charToOffset c | c <- key ]

// plugboard from FranklinHeath wiki:
franklinHeathPlugboard = buildPlugboard
    ["AP","BR","CM","FZ","GJ","IL","NT","OV","QS","WX"] alphabet 0
nullPlugboard = alphabet

franklinHeathRings = [9,13,20]  // "JNU"

testEnigmaState = buildBasicState  [ rotorIoff, rotorIIoff, rotorIIIoff ]
                                   [ rotorIoffBwd, rotorIIoffBwd, rotorIIIoffBwd ]
                                   [ pinsI, pinsII, pinsIII ]
                                   reflectorBoff
                                   nullPlugboard

// these settings are in this Enigma Simulator URL
// http://enigma.louisedade.co.uk/enigma.html?m3;b;b123;AJNU;AXYZ;AP-BR-CM-FZ-GJ-IL-NT-QS-WX

// http://enigma.louisedade.co.uk/enigma.html?m3;b;b123;AJNU;AXYZ
// QKTPEBZIUK -> GOODRESULT
franklinHeathState = buildEnigmaState
                        [ rotorIoff, rotorIIoff, rotorIIIoff ]
                        [ rotorIoffBwd, rotorIIoffBwd, rotorIIIoffBwd ]
                        [ pinsI, pinsII, pinsIII ]
                        reflectorBoff
                        franklinHeathPlugboard
                        franklinHeathRings
                        "VQQ"


// http://enigma.louisedade.co.uk/enigma.html?m3;b;b123;AJNU;AVQQ;AP-BR-CM-FZ-GJ-IL-NT-OV-QS-WX
// HABHVHLYDFNADZY -> THATSITWELLDONE

getPins : ThreeRotors -> [3]Bit
getPins rs = [ ((rs@0)@0).2, ((rs@1)@0).2, ((rs@2)@0).2 ]
// rs@0 is the first rotor (type: [26](Char,Bit)
// (rs@0)@0 is the first element of the first rotor (type: (Char,Bit)
// ((rs@0)@0).0 is the character part of that first element (type: Char)
// ((rs@0)@0).1 is the Pin part of that first element (type: Bit)

// Cryptol wibble: shouldn't need parens above, @ should be
// left-associate, and >= priority to "."


getRotorRotations : ThreeRotors -> ([3]Bit, Bit)
getRotorRotations rs = ([r1, r2, r3], rf) where
    pins = getPins rs
    r1 = pins@1              // only rotate when middle pin set
    r2 = pins@2 || pins@1    // rotate if middle or right pin set
    r3 = True                // rightmost rotor always advances
    rf = reflAttachedToR1 && r1

// some Enigmas, the Reflector is attached to R1, so it rotates along
// with it. In most, though, the reflector never rotates.
reflAttachedToR1 = False

advanceRotor : Rotor -> Bit -> Rotor
advanceRotor r b = if b then r <<< 1 else r

advanceRotors : EnigmaState -> EnigmaState
advanceRotors es = { rotors = newrs, reflector = newrefl, plugboard = es.plugboard} where
    newrs = [ advanceRotor r b
            | r <- es.rotors
            | b <- rbits
            ]
    (rbits, refbit) = getRotorRotations es.rotors
    newrefl = if refbit then es.reflector <<< 1 else es.reflector
        // to model a reflector attached to R1, we rotate the
        // reflector when R1 does

rotorSequence es = sequence where
    sequence = [es] # [ advanceRotors ies | ies <- sequence ]

// The double-step happens here:
// > drop`{99}(rotorSequence testEnigmaState.rotors)

doReflector : Reflector -> Offset -> Offset
doReflector r o = (o + r@o) % 26

asciiToIndex c = c - 'A'
indexToAscii i = i + 'A'

doRotorFwd, doRotorBwd : Rotor -> Offset -> Offset
doRotorFwd rotor o = (o + (rotor @ o).0) % 26
doRotorBwd rotor o = (o + (rotor @ o).1) % 26

encryptOneChar : [26]Offset -> [26]Offset -> Char -> Char
encryptOneChar rotor reflector inputChar = outputChar where
  inputOffset  = charToOffset inputChar
  rotorO       = rotor @ inputOffset
  reflO        = reflector @ rotorO
  outputOffset = rotor @ reflO
  outputChar   = offsetToChar outputOffset

doOneRotor : Rotor -> Reflector -> Offset -> Offset
doOneRotor rotor rOffsets o = doRotorBwd rotor (doReflector rOffsets (doRotorFwd rotor o))

indexOf c chars = candidates ! 0 where
    candidates = [ -1 ] # [ if c == s then i else prev
                          | s <- chars
                          | prev <- candidates
                          | i <- [ 0 .. 25 ]
                          ]

invertPermutation : [26]Char -> [26]Char
invertPermutation permutation = [ alphabet @ (indexOf c permutation)
                                | c <- alphabet ]

// encryptOneRotor : {n} (fin n) => Rotor -> Reflector -> String n -> String n
encryptOneRotor rotor reflOf message =
    [ encryptOneChar (rotor <<< i) reflOf c
    | c <- message
    | i <- [1 .. 100]
    ]

doTwoRotors r1 r2 refl c =
    doRotorBwd
      r2
      (doOneRotor
        r1
        refl
        (doRotorFwd r2 c))

doThreeRotors r1 r2 r3 refl c =
    doRotorBwd
      r3
      (doTwoRotors
        r1
        r2
        refl
        (doRotorFwd r3 c))

doPlugboard : CharPerm -> Char -> Char
doPlugboard plugPerm c = plugPerm@(charToOffset c)

doEnigma : {n} (fin n) => EnigmaState -> String n -> String n
doEnigma es message =
    [ enigmaStep estate inChar
    | estate <- drop`{1}(rotorSequence es)
    | inChar <- message
    ]

enigmaStep : EnigmaState -> Char -> Char
enigmaStep es inC = doPlugboard es.plugboard (offsetToChar eno) where
    eno = doThreeRotors (es.rotors@0) (es.rotors@1) (es.rotors@2)
                  es.reflector (charToOffset (doPlugboard es.plugboard inC))

// Cryptol wibble: without outer parens above, get awful error

// encryptOneRotor (buildRotor rotorI zero) reflectorBoff "YMXOVPE"
// "GOODJOB"

enigmaManualPlugboard = buildPlugboard
    ["AM","FI","NV","PS","TU","WZ"] alphabet 0
enigmaManualRings = [24,13,22]
enigmaManualState = buildEnigmaState
                        [ rotorIIoff,    rotorIoff,    rotorIIIoff ]
                        [ rotorIIoffBwd, rotorIoffBwd, rotorIIIoffBwd ]
                        [ pinsII,        pinsI,        pinsIII ]
                        reflectorAoff
                        enigmaManualPlugboard
                        enigmaManualRings
                        "ABL"
enigmaManualMessage="GCDSEAHUGWTQGRKVLFGXUCALXVYMIGMMNMFDXTGNVHVRMMEVOUYFZSLRHDRRXFJWCFHUHMUNZEFRDISIKBGPMYVXUZ"

scharnhorstPlugboard = buildPlugboard
    ["AN","EZ","HK","IJ","LR","MQ","OT","PV","SW","UX"] alphabet 0
scharnhorstRings = [01,08,13]
scharnhorstState = buildEnigmaState
                        [ rotorIIIoff,    rotorVIoff,    rotorVIIIoff ]
                        [ rotorIIIoffBwd, rotorVIoffBwd, rotorVIIIoffBwd ]
                        [ pinsIII,        pinsVI,        pinsVIII ]
                        reflectorBoff
                        scharnhorstPlugboard
                        scharnhorstRings
                        "UZV"
scharnhorstMessage = "YKAENZAPMSCHZBFOCUVMRMDPYCOFHADZIZMEFXTHFLOLPZLFGGBOTGOXGRETDWTJIQHLMXVJWKZUASTR"

fhKeyAAAState = buildEnigmaState
                        [ rotorIoff, rotorIIoff, rotorIIIoff ]
                        [ rotorIoffBwd, rotorIIoffBwd, rotorIIIoffBwd ]
                        [ pinsI, pinsII, pinsIII ]
                        reflectorBoff
                        nullPlugboard
                        franklinHeathRings
                        "AAA"
